<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:WpfApp1"
                    xmlns:tableControl="clr-namespace:WpfApp1.TableControl"
                    x:Class="WpfApp1.TableControl.TableResourceDictionary"
                    x:ClassModifier="public">
    
    <tableControl:NameToBrushConverter x:Key="NameToBrushConverter"/>

    <Style TargetType="{x:Type TextBox}" x:Key="CellTextBox">
        <Setter Property="Background" Value="{Binding Background,
            Converter={StaticResource NameToBrushConverter}}"/>
        <!--<Setter Property="BorderBrush" Value="Gray"/>-->
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <!-- Modify default template, to change triggers -->
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                        </Trigger>-->
                        <!-- Original triggers -->
                        <!--<Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF7EB4EA"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF569DE5"/>
                        </Trigger>-->
                        <!-- MY trigger -->
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" Value="Gold"/>
                            <!--<Setter Property="BorderThickness" Value="2"/>-->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsUp}" Value="True">
                <Setter Property="TextBox.Background" Value="LightGreen" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsDown}" Value="True">
                <Setter Property="TextBox.Background" Value="Tomato" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsReadOnly}" Value="True">
                <Setter Property="TextBox.IsReadOnly" Value="True" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsSelected}" Value="True">
                <Setter Property="TextBox.BorderBrush" Value="Black" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsHighlighted}" Value="True">
                <Setter Property="TextBox.Background" Value="LightCyan" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsValueStale}" Value="True">
                <Setter Property="TextBox.Background" Value="LightCoral" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <DataTemplate x:Key="ColumnSplitterTemplate">
        <local:SimpleGridSplitter Grid.Column="{Binding Column}"
                                 
                                      Grid="{Binding Path=., RelativeSource={RelativeSource AncestorType={x:Type Grid}}}"
                          Width="1" HorizontalAlignment="Stretch" ResizeBehavior="PreviousAndNext"/>
    </DataTemplate>

    <DataTemplate x:Key="ColumnHeaderTemplate">
        <TextBlock Text="{Binding Text}"
                       HorizontalAlignment="Center" VerticalAlignment="Center" />
    </DataTemplate>

    <DataTemplate x:Key="CellTemplate">
            <TextBox Style="{StaticResource CellTextBox}" Text="{Binding Text}"
                         TextAlignment="Center"
                     
                         local:FocusExtensions.IsFocused="{Binding IsFocused}">
                <TextBox.ContextMenu>
                <ContextMenu ItemsSource="{Binding Actions}">
                    <!--<ContextMenu.Template>
                        <ControlTemplate>
                            <ItemsControl ItemsSource="{Binding Actions}">
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <StackPanel>
                                            <Button Content="{Binding Name}" Command="{Binding Action}"
                                                    Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"/>
                                        </StackPanel>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </ControlTemplate>
                    </ContextMenu.Template>-->
                    
                    <ContextMenu.ItemTemplate >
                        <DataTemplate DataType="{x:Type MenuItem}">
                            <MenuItem Header="{Binding Name}" Command="{Binding Action}"/>
                        </DataTemplate>
                    </ContextMenu.ItemTemplate>
                </ContextMenu>
            </TextBox.ContextMenu>
                <TextBox.InputBindings>
                    <KeyBinding Key="Up" Command="{Binding UpCommand}" />
                    <KeyBinding Key="Down" Command="{Binding DownCommand}" />
                    <KeyBinding Key="Right" Command="{Binding RightCommand}" />
                <KeyBinding Key="Left" Command="{Binding LeftCommand}" />
                <MouseBinding Command="{Binding SelectCellCommand}" Gesture="LeftClick" />
                <MouseBinding Command="{Binding SelectCellCommand}" Gesture="RightClick" />
                <MouseBinding Command="{Binding SelectNonAdjacentCellsCommand}" Gesture="Ctrl+LeftClick" />
                <MouseBinding Command="{Binding SelectRectangularBlockOfCellsCommand}" Gesture="Shift+LeftClick" />
            </TextBox.InputBindings>
                <!--<TextBox.Style>
                    <Style TargetType="{x:Type TextBox}">
                        <Setter Property="Background" Value="White"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsUp}" Value="True">
                                <Setter Property="TextBox.Background" Value="LightGreen" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsDown}" Value="True">
                                <Setter Property="TextBox.Background" Value="Tomato" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                    </TextBox.Style>-->
            </TextBox>
    </DataTemplate>

    <local:CellTemplateSelector x:Key="CellTemplateSelector"
                                              ColumnSplitterTemplate="{StaticResource ColumnSplitterTemplate}"
                                              ColumnHeaderTemplate="{StaticResource ColumnHeaderTemplate}"
                                              CellTemplate="{StaticResource CellTemplate}" />

    <DataTemplate DataType="{x:Type local:TableViewModel}">
        <DataTemplate.Resources>
            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        </DataTemplate.Resources>
        <ItemsControl Margin="5" ItemsSource="{Binding Cells}"
                      Visibility="{Binding IsVisible, Converter={StaticResource BooleanToVisibilityConverter}}"
                       ItemTemplateSelector="{StaticResource CellTemplateSelector}">
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>

                    <Grid local:GridExtensions.StarColumns="{Binding StarColumns}"
                        local:GridExtensions.ColumnCount="{Binding ColumnCount}"
                          local:GridExtensions.SharedSizeGroups="{Binding SharedSizeGroups}"
                        local:GridExtensions.StarRows="{Binding StarRows}"
                        local:GridExtensions.RowCount="{Binding RowCount}"/>

                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>

            <ItemsControl.Template>
                <ControlTemplate TargetType="ItemsControl">
                    <Border BorderThickness="1" BorderBrush="DarkGreen">
                        <ItemsPresenter>
                            <ItemsPresenter.LayoutTransform>
                                <ScaleTransform CenterX="0" CenterY="0"
                                                ScaleX="{Binding Zoom}" ScaleY="{Binding Zoom}"/>
                            </ItemsPresenter.LayoutTransform>
                        </ItemsPresenter>
                    </Border>
                </ControlTemplate>
            </ItemsControl.Template>

            <ItemsControl.ItemContainerStyle>
                <Style>
                   
                    <Setter Property="Grid.Column" Value="{Binding Column}"/>
                    <Setter Property="Grid.ColumnSpan" Value="{Binding ColumnSpan}" />
                    <Setter Property="Grid.Row" Value="{Binding Row}"/>
                    <Setter Property="Grid.RowSpan" Value="{Binding RowSpan}" />
                </Style>
            </ItemsControl.ItemContainerStyle>

            <!--<Button Grid.Column="0" HorizontalAlignment="Center" VerticalAlignment="Center" 
                       Content="Left Side"/>

            <GridSplitter Grid.Column="1" HorizontalAlignment="Stretch" Parent="{Binding Path=., RelativeSource={RelativeSource AncestorType={x:Type Grid}}}"
                          ResizeDirection="Columns" ResizeBehavior="CurrentAndNext" 
                          ToolTip="Drag left-right to resize" DragEnter="GridSplitter_DragEnter" DragStarted="GridSplitter_DragStarted"
                          GotFocus="GridSplitter_GotFocus" DragOver="GridSplitter_DragOver"
                          />

            <Button Grid.Column="2" HorizontalAlignment="Center" VerticalAlignment="Center" 
                       Content="Right Side"/>-->

        </ItemsControl>
    </DataTemplate>
</ResourceDictionary>